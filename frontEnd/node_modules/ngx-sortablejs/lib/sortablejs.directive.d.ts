import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChange } from '@angular/core';
import { SortablejsBindingTarget } from './sortablejs-binding-target';
import { SortablejsOptions } from './sortablejs-options';
import { SortablejsService } from './sortablejs.service';
import * as ɵngcc0 from '@angular/core';
export declare class SortablejsDirective implements OnInit, OnChanges, OnDestroy {
    private globalConfig;
    private service;
    private element;
    private zone;
    private renderer;
    sortablejs: SortablejsBindingTarget;
    sortablejsContainer: string;
    sortablejsOptions: SortablejsOptions;
    sortablejsCloneFunction: <T>(item: T) => T;
    private sortableInstance;
    runInsideAngular: boolean;
    sortablejsInit: EventEmitter<any>;
    constructor(globalConfig: SortablejsOptions, service: SortablejsService, element: ElementRef, zone: NgZone, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [prop in keyof SortablejsDirective]: SimpleChange;
    }): void;
    ngOnDestroy(): void;
    private create;
    private getBindings;
    private readonly options;
    private readonly optionsWithoutEvents;
    private proxyEvent;
    private readonly isCloning;
    private clone;
    private readonly overridenOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SortablejsDirective, [{ optional: true; }, null, null, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SortablejsDirective, "[sortablejs]", never, { "runInsideAngular": "runInsideAngular"; "sortablejs": "sortablejs"; "sortablejsContainer": "sortablejsContainer"; "sortablejsOptions": "sortablejsOptions"; "sortablejsCloneFunction": "sortablejsCloneFunction"; }, { "sortablejsInit": "sortablejsInit"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGFibGVqcy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsic29ydGFibGVqcy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTb3J0YWJsZWpzQmluZGluZ1RhcmdldCB9IGZyb20gJy4vc29ydGFibGVqcy1iaW5kaW5nLXRhcmdldCc7XG5pbXBvcnQgeyBTb3J0YWJsZWpzT3B0aW9ucyB9IGZyb20gJy4vc29ydGFibGVqcy1vcHRpb25zJztcbmltcG9ydCB7IFNvcnRhYmxlanNTZXJ2aWNlIH0gZnJvbSAnLi9zb3J0YWJsZWpzLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU29ydGFibGVqc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZ2xvYmFsQ29uZmlnO1xuICAgIHByaXZhdGUgc2VydmljZTtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgc29ydGFibGVqczogU29ydGFibGVqc0JpbmRpbmdUYXJnZXQ7XG4gICAgc29ydGFibGVqc0NvbnRhaW5lcjogc3RyaW5nO1xuICAgIHNvcnRhYmxlanNPcHRpb25zOiBTb3J0YWJsZWpzT3B0aW9ucztcbiAgICBzb3J0YWJsZWpzQ2xvbmVGdW5jdGlvbjogPFQ+KGl0ZW06IFQpID0+IFQ7XG4gICAgcHJpdmF0ZSBzb3J0YWJsZUluc3RhbmNlO1xuICAgIHJ1bkluc2lkZUFuZ3VsYXI6IGJvb2xlYW47XG4gICAgc29ydGFibGVqc0luaXQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKGdsb2JhbENvbmZpZzogU29ydGFibGVqc09wdGlvbnMsIHNlcnZpY2U6IFNvcnRhYmxlanNTZXJ2aWNlLCBlbGVtZW50OiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczoge1xuICAgICAgICBbcHJvcCBpbiBrZXlvZiBTb3J0YWJsZWpzRGlyZWN0aXZlXTogU2ltcGxlQ2hhbmdlO1xuICAgIH0pOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjcmVhdGU7XG4gICAgcHJpdmF0ZSBnZXRCaW5kaW5ncztcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zV2l0aG91dEV2ZW50cztcbiAgICBwcml2YXRlIHByb3h5RXZlbnQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpc0Nsb25pbmc7XG4gICAgcHJpdmF0ZSBjbG9uZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG92ZXJyaWRlbk9wdGlvbnM7XG59XG4iXX0=